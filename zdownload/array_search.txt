//1) Linear search

//(i)
#include <iostream>

using namespace std;

int main()
{
 int n;
 cout<<"enter the number of element";
 cin>>n;
 int A[n];
 int search;
 cout<<"enter the array element";
 for(int i=0;i<n;i++)
 {
    cin>>A[i];
 }
 cout<<"enter the element to be search";
 cin>>search;
 for(int i=0;i<n;i++)
 {
    if (search==A[i])
    {
        cout<<"element is found at index "<<i;
        return 0;
    }
       
 }
    cout<<"\nsorry!! given not found\n";
    return 0;
}



//*********************END**************************



//(ii)


#include <iostream>

using namespace std;

int Lsearch(int A[],int size,int item)
{
    for(int i=0;i<size;i++)
    {
        if (item==A[i])
        return i;
    }
    
    return -1;
}   


int main()
{
    int n,Item,index;
    cout<<"Enter the size of array";
    cin>>n;
    int A[n];
    cout<<"Enter the elements of array";
    for (int i=0;i<n;i++)
    {
        cin>>A[i];
    }
    cout<<"Enter the element to search";
    cin>>Item;
    index=Lsearch(A,n,Item);
    if (index==-1)
    {
        cout<<"Sorry!! Element is not found\n";
    }
    else 
    cout<<"Element found at index "<<index<<endl;
    
    return 0;
}


//***********************END**************************



//(iii)

#include <iostream>
using namespace std;

int Lsearch(int[],int,int);

int main()
{
    int n,Item,index;
    cout<<"Enter the size of array";
    cin>>n;
    int A[n];
    cout<<"Enter the elements of array";
    for (int i=0;i<n;i++)
    {
        cin>>A[i];
    }
    cout<<"Enter the element to search";
    cin>>Item;
    index=Lsearch(A,n,Item);
    if (index==-1)
    {
        cout<<"Element is not found\n";
    }
    else 
    cout<<"Element found at index "<<index<<endl;
    
    return 0;
}
int Lsearch(int A[],int size,int item)
{
    for(int i=0;i<size;i++)
    {
        if (item==A[i])
        return i;
    }
    
    return -1;
}   

//***********************END*************************










//2)Binary Search

//(i)

#include <iostream>

using namespace std;

int main()
{
    int A[10]={2,3,4,5,6,7,8,11,13,15};
    int l=0,h=9,Item,mid;
    cout<<"enter the item to be search";
    cin>>Item;
    while (l<=h)
    {
        mid=(l+h)/2;
        if(Item==A[mid])
        {
            cout<<"found at index "<<mid;
            return 0;
        }
        else if(Item<A[mid])
        {
            h=(mid-1);
        }
        else 
        {
            l=mid+1;
        }
        
    }
    return 0;
}

//***********************END**************************
//(ii)

#include <iostream>
using namespace std;


int Bsearch(int A[],int size,int item)
{
    int mid,beg,last;
    beg=0;
    last=(size-1);
    
    while(beg<=last)
    {
        mid=(beg+last)/2; 
        if (item==A[mid])
        {
            return mid;
        }
        else if(item>A[mid])
        {
            beg=mid+1;
        }
        else if (item<A[mid])
        {
            last=mid-1;
        }
    }
    return -1;  
    
}
int main()
{
    int n,Item,index;
    cout<<"Enter the size of array ";
    cin>>n;
    int A[n];
    cout<<"Enter the elements of array ";
    for (int i=0;i<n;i++)
    {
        cin>>A[i];
    }
    cout<<"Enter the element to search ";
    cin>>Item;
    index=Bsearch(A,n,Item);
    if (index==-1)
    {
        cout<<"Sorry!! Item not found";
    }
    else
    {
        cout<<"Item is found at index "<<index;
    }
    return 0;

}

//***********************END**************************

//(iii)

#include <iostream>
using namespace std;

int Bsearch(int A[],int,int);
int main()
{
    int n,Item,index;
    cout<<"Enter the size of array ";
    cin>>n;
    int A[n];
    cout<<"Enter the elements of array ";
    for (int i=0;i<n;i++)
    {
        cin>>A[i];
    }
    cout<<"Enter the element to search ";
    cin>>Item;
    index=Bsearch(A,n,Item);
    if (index==-1)
    {
        cout<<"Sorry!! Item not found";
    }
    else
    {
        cout<<"Item is found at index "<<index;
    }
    return 0;

}
int Bsearch(int A[],int size,int item)
{
    int mid,beg,last;
    beg=0;
    last=(size-1);
    
    while(beg<=last)
    {
        mid=(beg+last)/2; 
        if (item==A[mid])
        {
            return mid;
        }
        else if(item>A[mid])
        {
            beg=mid+1;
        }
        else if (item<A[mid])
        {
            last=mid-1;
        }
    }
    return -1;  
    
}

//***********************END**************************
//(iv) Binary search, also check order

#include <iostream>
using namespace std;
int Bsearch(int A[],int,int);
int check_sort_As(int A[],int);
int check_sort_de(int A[],int);
int main()
{
    int n,Item,index,check;
    cout<<"Enter the size of array ";
    cin>>n;
    int A[n];
    cout<<"Enter the elements of array ";
    for (int i=0;i<n;i++)
    {
        cin>>A[i];
    }
    if (A[0]<A[1])
    {
        check=check_sort_As(A,n);
        if (check==-1)
        {
            return 0;
        }
    }
    else if (A[0]>A[1])
    {
        check=check_sort_de(A,n);
        if (check==-1)
        {
            return 0;
        }
    }
    cout<<"Enter the element to search ";
    cin>>Item;
    index=Bsearch(A,n,Item);
    if (index==-1)
    {
        cout<<"Sorry!! Item not found";
    }
    else
    {
        cout<<"Item is found at index "<<index;
    }
    return 0;

}

int check_sort_As(int A[],int n)
{
    for(int i=0;i<n-1;i++)
    {
        
        if(A[i]<A[i+1]);
        else 
        {
        cout<<"ERROR!! Elements are not ascending in order at position "<<(i+1)<<endl;
        return -1;
        }
    }
    return 1;    
}
int check_sort_de(int A[],int n)
{
    for(int i=0;i<n-1;i++)
    {
        
        if(A[i]>A[i+1]);
        else 
        {
        cout<<"ERROR!! Elements are not in descending order at position"<<(i+2)<<endl;
        return -1;
        }
    }
    return 1;    
}

int Bsearch(int A[],int size,int item)
{
    int mid,beg,last;
    beg=0;
    last=(size-1);
    
    while(beg<=last)
    {
        mid=(beg+last)/2; 
        if (item==A[mid])
        {
            return mid;
        }
        else if(item>A[mid])
        {
            beg=mid+1;
        }
        else if (item<A[mid])
        {
            last=mid-1;
        }
    }
    return -1;  
}






